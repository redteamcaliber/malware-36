package raid6;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Storage {
	private int n;
	private int x;
	private int blockIndex = 0;
	private String path = "/home/batu/disks/";
	private Map<String, Integer> map = new HashMap<String, Integer>();

	private Map<Integer, Integer> logTable = new HashMap<Integer, Integer>();
	private Map<Integer, Integer> antilogTable = new HashMap<Integer, Integer>();

	public static void main(String[] args) {
		Storage sd = new Storage(4, 1);
		sd.initSystem(sd.path);
		sd.initTable();

		//sd.storeFile("/home/batu/train-new 1gram.arff");
	}

	private void initTable() {
		// TODO Auto-generated method stub
		this.antilogTable.put(0, 1);
		int alog;
		for (int i = 1; i < 256; i++) {
			alog = this.antilogTable.get(i - 1) * 2;
			if (alog >= 256) {
				alog = alog ^ 285;
			}
			this.antilogTable.put(i, alog);
			this.logTable.put(alog, i);
			System.out.println("i=" + Integer.toHexString(i) + ", alog=" +Integer.toHexString(alog));
		}
	}

	private void storeFile(String path) {
		try {
			FileInputStream f = new FileInputStream(path);
			FileOutputStream out = null;
			FileInputStream pin = null;
			BufferedWriter pout = null;
			FileInputStream qin = null;
			BufferedWriter qout = null;
			long size = f.getChannel().size();
			this.map.put(path, this.blockIndex);
			boolean exist = false;
			long i = size;
			char b;
			int oldPCode;
			char[] pCode = new char[x * 1000000 + 1];
			int oldQCode;
			char[] qCode = new char[x * 1000000 + 1];
			int pIndex = 0;
			while (i >= 0) {
				out = new FileOutputStream(this.path + "disk" + blockIndex % n + "/block" + (blockIndex + 1) + ".txt");
				File p = new File(this.path + "disk" + n + "/p" + (blockIndex / n + 1) + ".txt");
				File q = new File(this.path + "disk" + (n + 1) + "/q" + (blockIndex / n + 1) + ".txt");
				exist = p.exists();
				if (!exist) {
					p.createNewFile();
				}
				exist = q.exists();
				if (!exist) {
					q.createNewFile();
				}
				pin = new FileInputStream(p);
				qin = new FileInputStream(q);
				pIndex = 0;
				long j;
				if (x * 1000000 > i) {
					j = i;
				} else {
					j = x * 1000000;
				}
				for (; j >= 0; j--) {
					b = (char) f.read();
					out.write(b);
					// change p
					if (exist) {
						oldPCode = (byte) pin.read();
					} else {
						oldPCode = 0;
					}
					pCode[pIndex] = (char) (oldPCode ^ b);
					// System.out.println("b="+b+", oldPCode="+oldPCode+",
					// pCode="+pCode[pIndex]);
					// change q
					if (exist) {
						oldQCode = (byte) qin.read();
					} else {
						oldQCode = 0;
					}
					qCode[pIndex] = (char) (oldQCode ^ product((blockIndex % n), b));
					System.out.println("b=" + Integer.toHexString(b) + ", oldQCode=" + Integer.toHexString(oldQCode)
							+ ", qCode=" + Integer.toHexString(qCode[pIndex]));
					if (oldQCode < 0)
						return;
					pIndex++;
					i--;
				}

				pin.close();
				pout = new BufferedWriter(new FileWriter(p));
				pout.write(pCode.toString());
				pout.close();

				qin.close();
				qout = new BufferedWriter(new FileWriter(q));
				qout.write(qCode.toString());
				qout.close();

				out.close();
				this.blockIndex++;
			}

			f.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private int product(int i, int b) {
		int j = log(b);
		return antiLog(i + j);
	}

	private int antiLog(int i) {
		return this.antilogTable.get(i);
	}

	private int log(int b) {
		return this.logTable.get(b);
	}

	Storage(int n, int x) {
		this.n = n;
		this.x = x;
	}

	private void initSystem(String path) {
		for (int i = 0; i < this.n + 2; i++) {
			if ((new File(path + "disk" + i)).mkdirs()) {

			} else {
				System.out.println("create folder error.");
			}
		}
	}

}
